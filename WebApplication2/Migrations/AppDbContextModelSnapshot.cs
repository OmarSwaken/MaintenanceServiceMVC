// <auto-generated />
using System;
using MaintenanceServiceMVC.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MaintenanceServiceMVC.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MaintenanceServiceMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            Address = "123 Main St, NY",
                            Email = "john.smith@example.com",
                            Name = "John Smith",
                            Phone = "+1-555-1234"
                        },
                        new
                        {
                            CustomerId = 2,
                            Address = "45 Park Ave, LA",
                            Email = "emily.j@example.com",
                            Name = "Emily Johnson",
                            Phone = "+1-555-5678"
                        },
                        new
                        {
                            CustomerId = 3,
                            Address = "78 Oak Rd, TX",
                            Email = "michael.b@example.com",
                            Name = "Michael Brown",
                            Phone = "+1-555-9012"
                        },
                        new
                        {
                            CustomerId = 4,
                            Address = "12 Lakeview Dr, FL",
                            Email = "sarah.d@example.com",
                            Name = "Sarah Davis",
                            Phone = "+1-555-3456"
                        },
                        new
                        {
                            CustomerId = 5,
                            Address = "90 Sunset Blvd, CA",
                            Email = "david.w@example.com",
                            Name = "David Wilson",
                            Phone = "+1-555-7890"
                        });
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Professional", b =>
                {
                    b.Property<int>("ProfessionalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessionalId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("nvarchar(254)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProfessionalId");

                    b.ToTable("Professionals");

                    b.HasData(
                        new
                        {
                            ProfessionalId = 1,
                            Email = "james.m@example.com",
                            ExperienceYears = 8,
                            HourlyRate = 50m,
                            IsAvailable = true,
                            JoinDate = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "James Miller",
                            Phone = "+1-555-1111",
                            Rating = 4.5m,
                            Specialty = "Plumbing"
                        },
                        new
                        {
                            ProfessionalId = 2,
                            Email = "olivia.g@example.com",
                            ExperienceYears = 10,
                            HourlyRate = 60m,
                            IsAvailable = true,
                            JoinDate = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Olivia Garcia",
                            Phone = "+1-555-2222",
                            Rating = 4.8m,
                            Specialty = "Electrical"
                        },
                        new
                        {
                            ProfessionalId = 3,
                            Email = "ethan.m@example.com",
                            ExperienceYears = 6,
                            HourlyRate = 45m,
                            IsAvailable = false,
                            JoinDate = new DateTime(2021, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ethan Martinez",
                            Phone = "+1-555-3333",
                            Rating = 4.3m,
                            Specialty = "Carpentry"
                        },
                        new
                        {
                            ProfessionalId = 4,
                            Email = "sophia.r@example.com",
                            ExperienceYears = 7,
                            HourlyRate = 40m,
                            IsAvailable = true,
                            JoinDate = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Sophia Rodriguez",
                            Phone = "+1-555-4444",
                            Rating = 4.9m,
                            Specialty = "Cleaning"
                        },
                        new
                        {
                            ProfessionalId = 5,
                            Email = "liam.l@example.com",
                            ExperienceYears = 5,
                            HourlyRate = 55m,
                            IsAvailable = true,
                            JoinDate = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Liam Lee",
                            Phone = "+1-555-5555",
                            Rating = 4.2m,
                            Specialty = "Painting"
                        });
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.ProfessionalService", b =>
                {
                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCertified")
                        .HasColumnType("bit");

                    b.HasKey("ProfessionalId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ProfessionalServices");

                    b.HasData(
                        new
                        {
                            ProfessionalId = 1,
                            ServiceId = 1,
                            CertificationDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCertified = true
                        },
                        new
                        {
                            ProfessionalId = 2,
                            ServiceId = 2,
                            CertificationDate = new DateTime(2022, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCertified = true
                        },
                        new
                        {
                            ProfessionalId = 3,
                            ServiceId = 3,
                            CertificationDate = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCertified = false
                        },
                        new
                        {
                            ProfessionalId = 4,
                            ServiceId = 4,
                            CertificationDate = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCertified = true
                        },
                        new
                        {
                            ProfessionalId = 5,
                            ServiceId = 5,
                            CertificationDate = new DateTime(2024, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCertified = true
                        });
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            ReviewId = 1,
                            Comment = "Excellent work!",
                            CustomerId = 1,
                            ProfessionalId = 1,
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReviewId = 2,
                            Comment = "Good service, on time.",
                            CustomerId = 2,
                            ProfessionalId = 2,
                            Rating = 4,
                            ReviewDate = new DateTime(2025, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReviewId = 3,
                            Comment = "Average quality.",
                            CustomerId = 3,
                            ProfessionalId = 3,
                            Rating = 3,
                            ReviewDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReviewId = 4,
                            Comment = "Highly recommend!",
                            CustomerId = 4,
                            ProfessionalId = 4,
                            Rating = 5,
                            ReviewDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            ReviewId = 5,
                            Comment = "Nice work, but a bit slow.",
                            CustomerId = 5,
                            ProfessionalId = 5,
                            Rating = 4,
                            ReviewDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            ServiceId = 1,
                            BasePrice = 80m,
                            CreatedDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Fix leaks, replace pipes, and other plumbing services.",
                            IsActive = true,
                            Name = "Plumbing Repair"
                        },
                        new
                        {
                            ServiceId = 2,
                            BasePrice = 100m,
                            CreatedDate = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Install, repair, and maintain electrical systems.",
                            IsActive = true,
                            Name = "Electrical Work"
                        },
                        new
                        {
                            ServiceId = 3,
                            BasePrice = 120m,
                            CreatedDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Custom furniture, repairs, and woodwork.",
                            IsActive = true,
                            Name = "Carpentry"
                        },
                        new
                        {
                            ServiceId = 4,
                            BasePrice = 60m,
                            CreatedDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Deep cleaning for houses and offices.",
                            IsActive = true,
                            Name = "House Cleaning"
                        },
                        new
                        {
                            ServiceId = 5,
                            BasePrice = 150m,
                            CreatedDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Interior and exterior painting services.",
                            IsActive = true,
                            Name = "Painting"
                        });
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ServiceRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRequestId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("FinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ServiceRequestId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRequests");

                    b.HasData(
                        new
                        {
                            ServiceRequestId = 1,
                            Address = "123 Main St, NY",
                            CompletedDate = new DateTime(2025, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerId = 1,
                            Description = "Fix kitchen sink leak",
                            FinalPrice = 90m,
                            Notes = "Quick repair.",
                            ProfessionalId = 1,
                            RequestDate = new DateTime(2025, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDate = new DateTime(2025, 8, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 1,
                            Status = "Completed"
                        },
                        new
                        {
                            ServiceRequestId = 2,
                            Address = "45 Park Ave, LA",
                            CustomerId = 2,
                            Description = "Install new ceiling fan",
                            ProfessionalId = 2,
                            RequestDate = new DateTime(2025, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDate = new DateTime(2025, 8, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 2,
                            Status = "InProgress"
                        },
                        new
                        {
                            ServiceRequestId = 3,
                            Address = "78 Oak Rd, TX",
                            CustomerId = 3,
                            Description = "Repair wardrobe door",
                            Notes = "Needs urgent fix.",
                            ProfessionalId = 3,
                            RequestDate = new DateTime(2025, 8, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 3,
                            Status = "Pending"
                        },
                        new
                        {
                            ServiceRequestId = 4,
                            Address = "12 Lakeview Dr, FL",
                            CustomerId = 4,
                            Description = "Weekly cleaning service",
                            ProfessionalId = 4,
                            RequestDate = new DateTime(2025, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ScheduledDate = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 4,
                            Status = "Assigned"
                        },
                        new
                        {
                            ServiceRequestId = 5,
                            Address = "90 Sunset Blvd, CA",
                            CustomerId = 5,
                            Description = "Paint living room",
                            Notes = "Prefer light blue.",
                            ProfessionalId = 5,
                            RequestDate = new DateTime(2025, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ServiceId = 5,
                            Status = "Pending"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Customer", b =>
                {
                    b.HasOne("MaintenanceServiceMVC.Models.ApplicationUser", "User")
                        .WithOne("Customer")
                        .HasForeignKey("MaintenanceServiceMVC.Models.Customer", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.ProfessionalService", b =>
                {
                    b.HasOne("MaintenanceServiceMVC.Models.Professional", "Professional")
                        .WithMany("ProfessionalServices")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaintenanceServiceMVC.Models.Service", "Service")
                        .WithMany("ProfessionalServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Review", b =>
                {
                    b.HasOne("MaintenanceServiceMVC.Models.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaintenanceServiceMVC.Models.Professional", "Professional")
                        .WithMany("Reviews")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.ServiceRequest", b =>
                {
                    b.HasOne("MaintenanceServiceMVC.Models.Customer", "Customer")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MaintenanceServiceMVC.Models.Professional", "Professional")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MaintenanceServiceMVC.Models.Service", "Service")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Professional");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MaintenanceServiceMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MaintenanceServiceMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MaintenanceServiceMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MaintenanceServiceMVC.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.ApplicationUser", b =>
                {
                    b.Navigation("Customer")
                        .IsRequired();
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Customer", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Professional", b =>
                {
                    b.Navigation("ProfessionalServices");

                    b.Navigation("Reviews");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("MaintenanceServiceMVC.Models.Service", b =>
                {
                    b.Navigation("ProfessionalServices");

                    b.Navigation("ServiceRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
